{"ast":null,"code":"import firebase from \"firebase/app\";\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBHUS6_1Diij6hQurXajrJOdt-tA43DeiA\",\n  authDomain: \"shopmestore-88a11.firebaseapp.com\",\n  databaseURL: \"https://shopmestore-88a11.firebaseio.com\",\n  projectId: \"shopmestore-88a11\",\n  storageBucket: \"shopmestore-88a11.appspot.com\",\n  messagingSenderId: \"550076746182\",\n  appId: \"1:550076746182:web:dc0cf9c67c355a15a78ac7\",\n  measurementId: \"G-QE77LDDFVD\"\n};\nexport const fireStoreDbPaths = {\n  users: \"users\",\n  shopItems: \"shopItems\"\n};\nfirebase.initializeApp(firebaseConfig);\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\"\n});\nexport const handleSignInWithGoogle = () => auth.signInWithPopup(provider);\nexport const createAuthenticatedUserRef = async authenticatedUser => {\n  if (!authenticatedUser) {\n    return;\n  }\n\n  const userPath = `${fireStoreDbPaths.users}/${authenticatedUser.uid}`;\n  const userReference = firestore.doc(userPath);\n  const snapShot = await userReference.get(); // Authenticated user already exists in firestore database\n\n  if (snapShot.exists) {\n    return userReference;\n  } // Persist authenticated user in firestore database\n\n\n  const {\n    displayName,\n    email,\n    metadata\n  } = authenticatedUser;\n  const {\n    creationTime\n  } = metadata;\n\n  try {\n    await userReference.set({\n      email: email,\n      userName: displayName,\n      creationTimeMs: Date.parse(creationTime)\n    });\n  } catch (error) {\n    console.log(` Error creating user in firestore with email: ${email}`);\n  }\n\n  return userReference;\n};\nexport const convertCollectionToMapInsteadOfArray = collectionItems => {\n  const collectionRef = firestore.collection(fireStoreDbPaths.shopItems).get().then(results => console.log(\"results:\", results.forEach(result => {\n    console.log(\"result\", result.data());\n  }))).catch(error => {\n    console.log(\"there was an erorr!\");\n  });\n  console.log(\"collectionRef\", collectionRef);\n};","map":{"version":3,"sources":["/Users/antdwash/Desktop/:coding:projects/shop-me/src/firebase/util.js"],"names":["firebase","firebaseConfig","apiKey","authDomain","databaseURL","projectId","storageBucket","messagingSenderId","appId","measurementId","fireStoreDbPaths","users","shopItems","initializeApp","auth","firestore","provider","GoogleAuthProvider","setCustomParameters","prompt","handleSignInWithGoogle","signInWithPopup","createAuthenticatedUserRef","authenticatedUser","userPath","uid","userReference","doc","snapShot","get","exists","displayName","email","metadata","creationTime","set","userName","creationTimeMs","Date","parse","error","console","log","convertCollectionToMapInsteadOfArray","collectionItems","collectionRef","collection","then","results","forEach","result","data","catch"],"mappings":"AAAA,OAAOA,QAAP,MAAqB,cAArB;AAEA,OAAO,eAAP;AACA,OAAO,oBAAP;AAEA,MAAMC,cAAc,GAAG;AACrBC,EAAAA,MAAM,EAAE,yCADa;AAErBC,EAAAA,UAAU,EAAE,mCAFS;AAGrBC,EAAAA,WAAW,EAAE,0CAHQ;AAIrBC,EAAAA,SAAS,EAAE,mBAJU;AAKrBC,EAAAA,aAAa,EAAE,+BALM;AAMrBC,EAAAA,iBAAiB,EAAE,cANE;AAOrBC,EAAAA,KAAK,EAAE,2CAPc;AAQrBC,EAAAA,aAAa,EAAE;AARM,CAAvB;AAWA,OAAO,MAAMC,gBAAgB,GAAG;AAC9BC,EAAAA,KAAK,EAAE,OADuB;AAE9BC,EAAAA,SAAS,EAAE;AAFmB,CAAzB;AAKPZ,QAAQ,CAACa,aAAT,CAAuBZ,cAAvB;AAEA,OAAO,MAAMa,IAAI,GAAGd,QAAQ,CAACc,IAAT,EAAb;AACP,OAAO,MAAMC,SAAS,GAAGf,QAAQ,CAACe,SAAT,EAAlB;AAEP,MAAMC,QAAQ,GAAG,IAAIhB,QAAQ,CAACc,IAAT,CAAcG,kBAAlB,EAAjB;AACAD,QAAQ,CAACE,mBAAT,CAA6B;AAC3BC,EAAAA,MAAM,EAAE;AADmB,CAA7B;AAIA,OAAO,MAAMC,sBAAsB,GAAG,MAAMN,IAAI,CAACO,eAAL,CAAqBL,QAArB,CAArC;AACP,OAAO,MAAMM,0BAA0B,GAAG,MAAOC,iBAAP,IAA6B;AACrE,MAAI,CAACA,iBAAL,EAAwB;AACtB;AACD;;AAED,QAAMC,QAAQ,GAAI,GAAEd,gBAAgB,CAACC,KAAM,IAAGY,iBAAiB,CAACE,GAAI,EAApE;AACA,QAAMC,aAAa,GAAGX,SAAS,CAACY,GAAV,CAAcH,QAAd,CAAtB;AACA,QAAMI,QAAQ,GAAG,MAAMF,aAAa,CAACG,GAAd,EAAvB,CAPqE,CASrE;;AACA,MAAID,QAAQ,CAACE,MAAb,EAAqB;AACnB,WAAOJ,aAAP;AACD,GAZoE,CAcrE;;;AACA,QAAM;AAAEK,IAAAA,WAAF;AAAeC,IAAAA,KAAf;AAAsBC,IAAAA;AAAtB,MAAmCV,iBAAzC;AACA,QAAM;AAAEW,IAAAA;AAAF,MAAmBD,QAAzB;;AAEA,MAAI;AACF,UAAMP,aAAa,CAACS,GAAd,CAAkB;AACtBH,MAAAA,KAAK,EAAEA,KADe;AAEtBI,MAAAA,QAAQ,EAAEL,WAFY;AAGtBM,MAAAA,cAAc,EAAEC,IAAI,CAACC,KAAL,CAAWL,YAAX;AAHM,KAAlB,CAAN;AAKD,GAND,CAME,OAAOM,KAAP,EAAc;AACdC,IAAAA,OAAO,CAACC,GAAR,CAAa,iDAAgDV,KAAM,EAAnE;AACD;;AAED,SAAON,aAAP;AACD,CA7BM;AA8BP,OAAO,MAAMiB,oCAAoC,GAAIC,eAAD,IAAqB;AACvE,QAAMC,aAAa,GAAG9B,SAAS,CAC5B+B,UADmB,CACRpC,gBAAgB,CAACE,SADT,EAEnBiB,GAFmB,GAGnBkB,IAHmB,CAGbC,OAAD,IACJP,OAAO,CAACC,GAAR,CACE,UADF,EAEEM,OAAO,CAACC,OAAR,CAAiBC,MAAD,IAAY;AAC1BT,IAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBQ,MAAM,CAACC,IAAP,EAAtB;AACD,GAFD,CAFF,CAJkB,EAWnBC,KAXmB,CAWZZ,KAAD,IAAW;AAChBC,IAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ;AACD,GAbmB,CAAtB;AAcAD,EAAAA,OAAO,CAACC,GAAR,CAAY,eAAZ,EAA6BG,aAA7B;AACD,CAhBM","sourcesContent":["import firebase from \"firebase/app\";\n\nimport \"firebase/auth\";\nimport \"firebase/firestore\";\n\nconst firebaseConfig = {\n  apiKey: \"AIzaSyBHUS6_1Diij6hQurXajrJOdt-tA43DeiA\",\n  authDomain: \"shopmestore-88a11.firebaseapp.com\",\n  databaseURL: \"https://shopmestore-88a11.firebaseio.com\",\n  projectId: \"shopmestore-88a11\",\n  storageBucket: \"shopmestore-88a11.appspot.com\",\n  messagingSenderId: \"550076746182\",\n  appId: \"1:550076746182:web:dc0cf9c67c355a15a78ac7\",\n  measurementId: \"G-QE77LDDFVD\",\n};\n\nexport const fireStoreDbPaths = {\n  users: \"users\",\n  shopItems: \"shopItems\",\n};\n\nfirebase.initializeApp(firebaseConfig);\n\nexport const auth = firebase.auth();\nexport const firestore = firebase.firestore();\n\nconst provider = new firebase.auth.GoogleAuthProvider();\nprovider.setCustomParameters({\n  prompt: \"select_account\",\n});\n\nexport const handleSignInWithGoogle = () => auth.signInWithPopup(provider);\nexport const createAuthenticatedUserRef = async (authenticatedUser) => {\n  if (!authenticatedUser) {\n    return;\n  }\n\n  const userPath = `${fireStoreDbPaths.users}/${authenticatedUser.uid}`;\n  const userReference = firestore.doc(userPath);\n  const snapShot = await userReference.get();\n\n  // Authenticated user already exists in firestore database\n  if (snapShot.exists) {\n    return userReference;\n  }\n\n  // Persist authenticated user in firestore database\n  const { displayName, email, metadata } = authenticatedUser;\n  const { creationTime } = metadata;\n\n  try {\n    await userReference.set({\n      email: email,\n      userName: displayName,\n      creationTimeMs: Date.parse(creationTime),\n    });\n  } catch (error) {\n    console.log(` Error creating user in firestore with email: ${email}`);\n  }\n\n  return userReference;\n};\nexport const convertCollectionToMapInsteadOfArray = (collectionItems) => {\n  const collectionRef = firestore\n    .collection(fireStoreDbPaths.shopItems)\n    .get()\n    .then((results) =>\n      console.log(\n        \"results:\",\n        results.forEach((result) => {\n          console.log(\"result\", result.data());\n        })\n      )\n    )\n    .catch((error) => {\n      console.log(\"there was an erorr!\");\n    });\n  console.log(\"collectionRef\", collectionRef);\n};\n"]},"metadata":{},"sourceType":"module"}